#!/usr/bin/env bash

set -e

# check manually with the released docker artifact to see the version of kd and kubectl
# docker run --rm -ti --entrypoint=bash -v $PWD/kd:/kd -e ENVIRONMENT -e APP quay.io/ukhomeofficedigital/kd:${KD_VERSION}

VERSION=$1
KD_BINARY='kd_linux_amd64'
KD_VERSION='v0.1.0'
KD_MD5='45aeb54e3eb78cadfd824c1650b427ce'
KD_DOWLOAD_ADDR="https://github.com/UKHomeOffice/kd/releases/download/${KD_VERSION}/kd_linux_amd64"
KUBECTL_BINARY='kubectl'
KUBECTL_VERSION='v1.3.5'
KUBECTL_MD5='26852c9bd750a2afee527658944397d1'
KUBECTL_DOWNLOAD_ADDR="https://storage.googleapis.com/kubernetes-release/release/${KUBECTL_VERSION}/bin/linux/amd64/kubectl"
ENVIRONMENT='dev'
APP='pttg-ip-gt-ui'

function getKd() {
	echo "checking if the desired kd version exists"
	if [[ -e ${KD_BINARY} ]] && [[ $(md5sum ${KD_BINARY} | awk '{print $1}') = ${KD_MD5} ]];
	then
		echo "kd already exists locally and it is the wanted version, moving on ..."
	else
		echo "downloading kd version: ${KD_VERSION}"
		curl -sLO "${KD_DOWLOAD_ADDR}" && chmod a+x ./${KD_BINARY}
	fi
}

function getKubectl() {
	echo "checking if the desired kubectl version exists"
	if [[ -e ${KUBECTL_BINARY} ]] && [[ $(md5sum ${KUBECTL_BINARY} | awk '{print $1}') = ${KUBECTL_MD5} ]];
	then
		echo "kubectl already exists locally and it is the wanted version, moving on ..."
	else
		echo "downloading kubectl version: ${KUBECTL_VERSION}"
		curl -sLO "${KUBECTL_DOWNLOAD_ADDR}" && chmod a+x ./${KUBECTL_BINARY}
	fi
}

function archiveGitCommit() {
	GIT_COMMIT=${GIT_COMMIT:-$(git rev-parse --short HEAD)}
	GIT_COMMIT=${GIT_COMMIT:0:7}

	echo ${GIT_COMMIT} > GIT_COMMIT
	echo "deploy triggered by commit : ${GIT_COMMIT} on repo: ${GIT_URL} on branch ${GIT_BRANCH}"
	echo "deploying application version: $VERSION"

}

archiveGitCommit
getKd
getKubectl

export PATH=$PWD:$PATH

kubectl version --client

echo "deploying ..."
export VERSION
export ENVIRONMENT
echo "deploying ingress"
./kd_linux_amd64 --context=pt-i-dev --namespace=pt-i-dev --file kd/${ENVIRONMENT}/${APP}-ingress.yaml
echo "deploying a deployment"
./kd_linux_amd64 --context=pt-i-dev --namespace=pt-i-dev --file kd/${ENVIRONMENT}/${APP}-deployment.yaml
echo "deploying a svc"
./kd_linux_amd64 --context=pt-i-dev --namespace=pt-i-dev --file kd/${ENVIRONMENT}/${APP}-svc.yaml
